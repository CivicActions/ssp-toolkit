schema_version: 3.0.0
name: Drupal
key: ~
system: ~
documentation_complete: ~
responsible_role: ~
references: ~
satisfies:
- control_key: AC-2
  standard_key: NIST_SP80053r4
  covered_by: []
  narrative:
  - text: |
      Drupal provides the following information system account types to support organizational mission/business functions:

      - Anonymous user - readers of the site who either do not have an account or are not
        logged in.

      - Authenticated user - All non-anonymous users inherit the "authenticated user role"
        that supports personal account management capabilities.

      - Administrator - This role has all permissions enabled by default.
    key: a
  - text: >
      Drupal defines a default set of roles; Anonymous, Authenticated, and Administrator,
      as well as providing for the creation of additional organizational-defined roles
      identified by The Project
    key: b
  - text: Drupal has a sophisticated permissions and role-based access control built-in.
      Each role within Drupal can only access the documents and controls for which
      their privilege allows.
    key: d
  - text: Drupal monitors the usage of information accounts in the Watchdog log.
    key: g
  references: ~
  implementation_statuses: ~
  control_origins: ~
  parameters: ~
- control_key: AC-3
  standard_key: NIST_SP80053r4
  covered_by: []
  narrative:
  - text: >
      Access control in Drupal is enforced by authentication via a unique username/password
      for every type of user except Anonymous user. The user’s privileges, permissions,
      and access are provided on the principle of least privilege.

      The anonymous user role has the least access to the site of all roles. The website
      does not allow anonymous users to register an account for themselves. Drupal
      Administrators are the only user roles that can create new user accounts.
    key: ~
  references: ~
  implementation_statuses: ~
  control_origins: ~
  parameters: ~
- control_key: AC-7
  standard_key: NIST_SP80053r4
  covered_by: []
  narrative:
  - text: Drupal can be configured to lock an account after a specified number of
      invalid login attempts within a specified time period. The default for Drupal
      is 5 failed login attempts within six hours.
    key: a
  - text: Lockdown following unsuccessful attempts is configurable by Drupal administrators
      to conform to defined requirements. When a user exceeds the limit of invalid
      login attempts, their account is automatically locked for a specified time and
      requires administrator action to unlock the account before the lockout period
      expires.
    key: b
  references: ~
  implementation_statuses: ~
  control_origins: ~
  parameters: ~
- control_key: AC-14
  standard_key: NIST_SP80053r4
  covered_by: []
  narrative:
  - text: >
      The anonymous user role has the least access to the site of all roles. Drupal
      sites can be configured to allow actions identified by The Project
    key: a
  references: ~
  implementation_statuses: ~
  control_origins: ~
  parameters: ~
- control_key: AU-2
  standard_key: NIST_SP80053r4
  covered_by: []
  narrative:
  - text: >
      Drupal's Watchdog log are configured to track all relevant auditable events
      as defined by Client


      - Apache access log: Contains a list of requests for your website that have
      bypassed Varnish. These requests include pages, theme files, and static media
      files.

      - Apache error log: Records any Apache-level issues. The issues reported here
      are usually caused by general server issues, including capacity problems, .htaccess
      problems, and missing files.

      - Drupal page request log: Records all Drupal page loads on your website.

      - Drupal Watchdog log: Records Drupal-related actions on your website. The Watchdog
      log is recorded on your database if you have enabled the syslog module.

      - MySQL slow query log: Contains a list of MySQL queries that have taken longer
      than one second to complete.

      - PHP error log: Records any issues that occur during the PHP processing portion
      of a page load. Issues reported here are usually caused by a website’s code,
      configuration, or content.
    key: a
  - text: |
      Information captured in the transaction logs includes, but is not limited to, the following auditable events:

      - Failed login attempts
      - Successful login attempts
      - User account deletions
      - User account blocking/unblocking
      - Changes in user role assignments
      - Unauthorized attempts to alter protected user fields
      - New user account creation
      - Password reset instructions mailed
      - User logins via a one-time login link
      - User logouts
      - Content creation (datasets, resources and other content types)
      - Content modification
      - Content deletion
      - Content publishing
      - Content unpublishing
      - File uploads
      - Web page not found
      - Website configuration changes
      - System administration activities
      - Slow query logs.
      - PHP error logs: Captures any errors logged during execution of the PHP programming language.
    key: d
  references: ~
  implementation_statuses: ~
  control_origins: ~
  parameters: ~
- control_key: AU-3
  standard_key: NIST_SP80053r4
  covered_by: []
  narrative:
  - text: |
      The logs collected for Drupal sites include the following types of information:

      - IP number of the request originator
      - Timestamp
      - Request URL
      - HTTP status code returned
      - Username
      - Drupal Watchdog message (if applicable)
      - Unique numerical ID of the content being modified (for content creation, modification and deletion events)
      When auditing a Drupal incident, the CivicActions developers aggregate log sources from multiple servers into the Graylog dashboard so that all log entries for a single managed security incident can be analyzed in a single document. Log sources are sorted, filtered and reviewed. Application logs are maintained primarily for an after-the-fact investigation of critical systems or security events.
    key: ~
  references: ~
  implementation_statuses: ~
  control_origins: ~
  parameters: ~
- control_key: CA-7
  standard_key: NIST_SP80053r4
  covered_by: []
  narrative:
  - text: >
      CivicActions follows recommendations and best practices developed by the Drupal
      community for monitoring. Examples of specific logs and metrics are included
      in AU-2 and AU-3.
    key: a
  - text: >
      CivicActions works closely with the Drupal security community and reviews security
      announcements as part of the continuous monitoring strategy. Items found to
      require immediate remediation will be addressed.
    key: c
  references: ~
  implementation_statuses: ~
  control_origins: ~
  parameters: ~
- control_key: IA-2 (1)
  standard_key: NIST_SP80053r4
  covered_by: []
  narrative:
  - text: >
      Drupal administrators and other roles with unrestricted access to live content
      and/or user accounts are required to use two-factor authentication. See artifact
      None
    key: ~
  references: ~
  implementation_statuses: ~
  control_origins: ~
  parameters: ~
- control_key: IA-4
  standard_key: NIST_SP80053r4
  covered_by: []
  narrative:
  - text: >
      Upon account creation, the Drupal software assigns each user account a unique
      numerical user ID (UID). This UID is used internally by the system to track
      user actions such as content creation or editing. The numerical user IDs are
      never reused even if their user accounts are subsequently blocked or deleted.
    key: a
  - text: >
      When Drupal user accounts are created, users' email addresses are verified by
      sending a single-use activation link to the user’s mailbox. The email recipient
      then uses the activation link to log in to the website and supply a password
      which must meet the system's password complexity requirements.
    key: b
  - text: >
      Identifiers for CivicActions internal personnel include a username based on
      the individual's full first and last name and are reviewed for uniqueness by
      the admin group when it approves the creation of the user account.
    key: c
  - text: Drupal user's unique identifier (the numeric user ID, or UID) is never reused.
    key: d
  references: ~
  implementation_statuses: ~
  control_origins: ~
  parameters: ~
- control_key: IA-5
  standard_key: NIST_SP80053r4
  covered_by: []
  narrative:
  - text: >
      Refer to control AC-2 in this SSP for further details on account provisioning.

      CivicActions will create and maintain an initial Drupal Administrator (highest
      level of Drupal Account). New Administrators are able to provide additional
      Administrator access at their own discretion and are ultimately responsible
      for managing their own Administrator and other user accounts that they create.
    key: a
  - text: >
      Initial authenticator content (a unique email address – not previously used
      in any other account) is provided by the user. Internal initial password requirements
      set by CivicActions Operations and ongoing password refreshes by internal users
      follow the requirements set in the Identification and Authentication Policy.
    key: b
  - text: The system partially inherits this control from Drupal standard password
      strength mechanisms.
    key: c
  - text: >
      The system partially inherits this control from Drupal standard password management.
      All password creation/change/reset operations are recorded in the website's
      "Drupal Watchdog" logs.
    key: d
  - text: >
      Drupal requires users to change their password upon initial login, and the application
      website enforces this. Each user account is assigned a default password that
      is randomly generated, not possible to guess, and not shared with anyone, including
      site administrators. When the user logs in and creates a new password, the default
      password is erased from the website database.
    key: e
  - text: >
      For all Drupal users, passwords are protected by the website's software, which
      only stores an encrypted string based on the password. This means that even
      if the website's database should be compromised, an attacker would still be
      unable to know users' actual passwords. Internal users receive training in security
      awareness and acceptable use and are instructed never to reveal their passwords
      to anyone.
    key: h
  - text: |
      Drupal users are required to take appropriate measures in the handling of passwords including:

      - Not transmitting user names and passwords together in an unencrypted format
      - Not permitting the sending of passwords in an unencrypted format via email
      - Not listing passwords in tickets
      - Not writing down or storing passwords in a readable form in any physical or logical location where they may be discoverable by unauthorized persons.
    key: i
  - text: This control is not applicable due to the fact that group accounts are not
      created within the Drupal application per IA Policy.
    key: j
  references: ~
  implementation_statuses: ~
  control_origins: ~
  parameters: ~
- control_key: IA-5 (1)
  standard_key: NIST_SP80053r4
  covered_by: []
  narrative:
  - text: >
      Drupal supports the requirement for password-based authentication complexity.
      New users of Drupal are required to specify their password authentication as
      soon as they log in to the website for the first. The website requires all submitted
      passwords to comply with validation rules, as described above in IA-5(c).

      Changing password lifetime, length, reuse or strength requirements requires
      a code setting change that therefore needs to be planned and approved by CivicActions
      Change Control Board before being implemented.
    key: a
  - text: >
      When required to change passwords, Drupal users are required to change their
      authenticator password by changing at least one character. Enforcement of this
      control is implemented through the website's software configuration.
    key: b
  - text: >
      All Drupal passwords are encrypted in storage, using the SHA-512 hashing algorithm
      with a salt. The hash function is performed repeatedly to further obfuscate
      the password via key stretching. In transmission, passwords are encrypted using
      SSL via HTTPS.
    key: c
  - text: The website requires all submitted passwords to comply with lifetime rules,
      as described above in IA-5(g).
    key: d
  - text: Password reuse is limited through software configuration.
    key: e
  - text: >
      When website users request a password reset, the website sends a temporary login
      link to the email address associated with their user account. After a user logs
      in via the temporary login link, the website requires the user to enter a new
      password before proceeding further.
    key: f
  references: ~
  implementation_statuses: ~
  control_origins: ~
  parameters: ~
- control_key: IA-6
  standard_key: NIST_SP80053r4
  covered_by: []
  narrative:
  - text: >
      Feedback of authentication information is obscured during the authentication
      process into the Drupal application by displaying “dots” in the place of a password,
      as is standard for web-based applications. In transmission, passwords are encrypted
      using SSL via HTTPS.
    key: ~
  references: ~
  implementation_statuses: ~
  control_origins: ~
  parameters: ~
- control_key: IA-7
  standard_key: NIST_SP80053r4
  covered_by: []
  narrative:
  - text: >
      All Drupal passwords are encrypted in storage, using the SHA-512 hashing algorithm
      with a salt. SHA-512 is an approved security function under FIPS PUB 140-2.
      The hash function is performed repeatedly to further obfuscate the password
      via key stretching. In transmission, passwords are encrypted using SSL via HTTPS.
    key: ~
  references: ~
  implementation_statuses: ~
  control_origins: ~
  parameters: ~
- control_key: SC-5
  standard_key: NIST_SP80053r4
  covered_by: []
  narrative:
  - text: Drupal has a manual ability to block IP addresses in cases where attacks
      bypass cloud protection. This is managed by CivicActions Operations.
    key: ~
  references: ~
  implementation_statuses: ~
  control_origins: ~
  parameters: ~
- control_key: SC-7
  standard_key: NIST_SP80053r4
  covered_by: []
  narrative:
  - text: >
      Drupal, when deployed on SELinux in full enforcing mode, minimizes the number
      of services and computing nodes that are exposed to the Internet. Drupal employs
      both the AWS platform safeguards and the Drupal Watchdog module in monitoring
      and recording system events. All other computing nodes used in the system are
      isolated within AWS.
    key: ~
  references: ~
  implementation_statuses: ~
  control_origins: ~
  parameters: ~

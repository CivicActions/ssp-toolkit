# {{ project.name }} Configuration Management Plan

This document describes how the {{ contractor.name_short }}/{{ project.name_short }} team approaches
configuration management of the {{ project.name_short }} General Services platform.

## Contents
<!--TOC-->

## Overview

{{ project.name_short }} employs a combination of AWS CloudFormation templates and the Ansible software
and configuration provisioning engine. Using CloudFormation, {{ contractor.name_short }} is able to
create virtual machines for each step of the CI/CD pipeline.

The server software update process, AIDE-based intrusion detection, and Git management of /etc are all
managed by Ansible. Drupal application updates both security and feature based, make use of a scripted
deployment process. A Git repository is used to manage and record configuration in code, templates and
playbooks. Peer review, automated testing and a stakeholder review on a staging server ensure that
configuration updates are deployed without problems. Should a problem be discovered, rollback to a
previous version is seamlessly managed by re-deploying the previous release stored in Git.

### Purpose

The purpose of this document is to identify and describe the Configuration Management (CM) process for
the {{ project.name }} and provide {{ contractor.name_short }} with the necessary structure to efficiently
and securely manage the configuration standards for software baselines and changes to assets within the
{{ project.name_short }} authorization boundary. This plan describes the processes required to ensure that
the inevitable changes to {{ project.name_short }} occur within an identifiable and controlled environment.

The {{ project.name_short }} CM Plan will ensure the following requirements are met:

- Formally documented CM roles, responsibilities, and procedures;
- A configuration control board that implements procedures to ensure a security review and approval of all
    proposed information system changes, to include interconnections to other information systems;
- A testing process to verify proposed configuration changes prior to implementation in the operational
    environment; and
- A verification process to provide additional assurance that the CM process is working effectively and that
    changes outside the CM process are technically or procedurally not permitted.

### Scope

This Configuration Management Plan and associated processes apply to all employees, contractors and vendors
that manage change or otherwise affect the operations of the {{ project.name_short }} system including but
not limited to the hardware, software, facilities or information resources. The scope of the Configuration
Management Plan is to establish policy and procedures to ensure that:

- The revision status of the {{ project.name_short }} Baseline can be clearly identified, accurately recorded,
    and provided to at any given point in time;
- The integrity of the approved Authorization and status of the {{ project.name_short }} baseline is maintained
    throughout all program phases/sprints;
- Coordination of approved changes are vetted in an effective and timely manner; and
- Changes to the defined Baseline is controlled and evaluated for impact on all related system aspects
    including security, and incorporated only after review and approval by the personnel.

### Roles and responsibilities

{{ project.name_short }} shall maintain an active Configuration Control Board (CCB) which will be established
as a formal approval authority for changes. It primarily exists to control changes to the
{{ project.name_short }} architecture (e.g., deployment of new software, code, or major architectural change).

The following **Roles** will be involved in configuration management activities and make up the Configuration
Control Board:

- {{ project.name_short }} Program Manager
- Information Systems Security Manager (ISSM)
- {{ contractor.name_short }} Team
  - Project Manager (PM)
  - Information Systems Security Officer (ISSO)
  - Infrastructure Support Team
  - Technology Lead (TL)
  - Development Team
- {{ project.name_short }} Managers

The **Program Manager** or a **Designated Representative (DR)** shall:

- ensure that appropriate roles, responsibilities, and access controls are assigned to support an effective
    Configuration Management Process;
- manage the Change Control Process, Change Management policy, and associated processes that are essential
    to the integrity of the Change Control Board;
- provide direction for {{ project.name_short }} sprints, ensuring that changes requiring modifications to
    the contract are submitted as required; and
- attend Configuration Control Board meetings.

The **Information Systems Security Manager (ISSM)** is the liaison between the PM and the
{{ contractor.name_short }} Team for CM-related actions, and shall:

- lead monthly Configuration Management meetings;
- ensure that CM changes are accurately assessed, documented, and disseminated to prevent any potential
    impact to the {{ project.name_short }} Authorization;
- analyze changes to {{ project.name_short }} to determine potential security impacts prior to change
    implementation;
- ensure that required stakeholders maintain active participation within the {{ project.name_short }} CCB; and
- attend Configuration Control Board meetings.

The **{{ contractor.name_short }} Team** is responsible for the {{ project.name_short }} architecture and
its components. The CivicActions Team tests and deploys {{ project.name_short }} components, modifies
existing software components, and identifies potential {{ project.name_short }} enhancements. The team is
composed of several roles:

- The **Project Manager (PM)** is responsible for shepherding the Agile process that is used to develop and
    maintain {{ project.name_short }} throughout any requested or required configuration changes.
- The **Information Systems Security Officer (ISSO)** develops and implements processes and procedures to
    insure the security of the {{ project.name_short }} General Service as it grows and changes through use
    and updates.
- The **Infrastructure Support Team** is authorized to make changes to the underlying {{ project.name_short }}
    infrastructure and components. This team shall ensure that a central inventory is maintained and updated as
    information system components are modified/added/removed to/from the {{ project.name_short }} environment.
- The **Technology Lead (TL)** manages the change process of the {{ project.name_short }} application, oversees
    the testing and staging operations, and is directly involved in the deployment of new releases.
- The **Development Team** is tasked with implementing newly requested features, mitigating reported bugs, and
    developing test systems to ensure the proper operation of the system as it undergoes changes.

The **{{ project.name_short }} Managers** are responsible for the day-to-day operation of the
{{ project.name_short }} Platform system, and maintain close communication with {{ project.name_short }} users
and/or organizations. This team is responsible for acting as a liaison between the {{ project.name_short }}
user base and the {{ contractor.name_short }} Team to ensure that the {{ project.name_short }} system is up and
operational, and coordinating minor changes to the {{ project.name_short }} Baseline. Attends Configuration
Control Board meetings as needed.

#### {{ project.name_short }} Working Group

The {{ project.name_short }} Working Group (WG) consists of the members of the current sprint, including at
a minimum, the Program Manager or DR, a Project Manager, and a Technology Lead. The WG coordinates minor
{{ project.name_short }} changes (e.g., setting changes within the Drupal application and minor operating
system updates) between the {{ contractor.name_short }} Team and {{ project.name_short }} Managers.
The {{ project.name_short }} CCB delegates this authority to the {{ project.name_short }} WG to provide a more
streamlined CM control mechanism for changes that do not affect the authorization of the
{{ project.name_short }} system. Although the WG is less formal than the CCB, all requests and decisions must
still be documented through the JIRA ticketing system.

### Definitions

The Configuration Management Process consists of a collection of activities focused on establishing and
maintaining the integrity of the {{ project.name_short }} baseline, through control of the processes for
initializing, changing, and monitoring the configurations of assets within the {{ project.name_short }}
authorization boundary. This process is administered by CivicActions in collaboration with the
{{ project.name_short }} Program Manager. The Program Manager, in collaboration with the ISSM shall ensure
define and implement configuration baseline process and standards for:

#### Configuration Item (CI)

An identifiable part of a system (e.g., hardware, software, firmware, documentation, or a combination
thereof) that is a discrete target of configuration control processes.

#### Baseline configuration

A set of specifications for a system, or CI within a system, that has been formally reviewed and agreed
on at a given point in time, and which can be changed only through change control procedures. The baseline
configuration is used as a basis for future builds, releases, and/or changes.

#### Configuration Management Plan (CM Plan)

A comprehensive description of the roles, responsibilities, policies, and procedures that apply when
managing the configuration of products and systems. The basic parts of a CM Plan include:

##### Configuration Item Identification

Methodology for selecting and naming configuration items that need to be placed under CM.

##### Configuration Change Control

Process for managing updates to the baseline configurations for the configuration items.

Other Commonly used terms used within the Configuration Management Process include:

**Baseline** - A current and comprehensive baseline inventory of all components required to support
{{ project.name_short }} operations; these components are part of the System Inventory and can be
changed only through formal change control procedures. The baseline includes sufficient detail to
re-create the {{ project.name_short }} General Service. Baselines exist for Software and Infrastructure,
and redundant copies of the Baseline are stored by {{ contractor.name_short }} in a location separate
from the Information System.

**Baseline Change Request (BCR)** - A formal written request to initiate a change to a baseline document.

**Configuration Control Board (CCB)** - A review panel that evaluates and/or approves changes to the
{{ project.name_short }} baseline.

**Code Commit** - A definitive change to any source code that defines the {{ project.name_short }} software,
or {{ project.name_short }} virtual infrastructure, or other supporting {{ project.name_short }} asset or
document which contributes to the {{ project.name_short }} Information System. Each code commit is assigned
a unique ID, and all code commits are part of a permanent record. All changes to Infrastructure and Software
Baselines are executed through code commits. It should be noted that not all code commits result in changes
to Baselines.

**Version** or **Release** - (1) A uniquely identified snapshot of a build that represents some identifiable
milestone of functions and capabilities of the Information System; or (2) a uniquely identified snapshot of
a document representing some identifiable milestone of content.

## What goes into configuration management?

In short, everything needed to run and operate the platform that is not a _secret_.
(_tbd: secret key management_)

Here are some examples that are in configuration management:

- CI/CD pipeline
- Infrastructure/network configuration (CloudFormation and Ansible)
- VM setup and quantity (CloudFormation and Ansible)
- Server software configuration (Ansible)
- {{ contractor.name_short }}-developed code (Git)
- Application configuration (Drupal features in Git)

## Where should all this configuration go

All configuration must be stored in GitLab using the following "Change Workflow" unless it is a _secret_.

## How do we test these changes

If possible, changes should be tested locally first. If local testing is successful, upload the changes to
a development environment for manual or automated testing.

Security tests need to be executed in the development environment where changes are applied.

## Change workflow

1. All configuration changes must flow through a Git repository, centrally managed through GitLab, unless
    they contain sensitive information.
2. A change is initiated and discussed as a "Backlog" {{ project.issue_system }} in the
    {{ project.issue_system_url }}
3. During Sprint Planning, the ticket is prioritized and may get moved from "Backlog" to "ToDo".
4. The ticket moves from "ToDo" to "In Progress" when it is assigned to a developer.
5. During development, code commits are checked for style and security using `githooks`.
6. After development and local testing, the developer initiates a "Merge Request" (MR).
7. The MR is reviewed by someone other than the committer. Pairing via screen-sharing is encouraged and
    qualifies as a review. Review should include assessment of architectural design, DRY principles,
    security and code quality.
8. The reviewer merges the MR.
9. A continuous integration (CI) server handles automated tests and continuous deployment (CD) of the
    merged changes.
    - All changes are deployed to a newly created test environment.
    - Any and all automated tests are run.
    - If all tests pass, changes can be promoted for deployment to production in the pipeline.
10. The CI/CD tool uses GitLab repositories as the single source of truth for what the platform should
    look like. If there are manual changes, the CI/CD tool resets the state of all systems to match.

## What if a configuration is changed, and it is not in Configuration Management?

If possible, Configuration Management tools should always roll back to a known state. Other than that,
these tools need to be able to "recreate" all settings from known configurations.

## Server configuration

Server configuration is handled via CloudFormation templates and Ansible playbooks and managed using Git.
Once a change has been committed and pushed to the Git repository, a merge request is created. Creating the
merge request triggers the CI/CD build pipeline which contains the following phases:

{% if cm.server_phases is defined %}
{%- for item in cm.server_phases -%}
{% if item.name is not none %}- **{{ item.name -}}:** {% endif -%}
  {{ item.description }}
{% endfor %}
{% endif -%}

## Application configuration

{% if cm.application_phases is defined %}
{%- for item in cm.application_phases -%}
{% if item.name is not none %}- **{{ item.name -}}:** {% endif -%}
  {{ item.description }}
{% endfor %}
{% endif -%}

## GitLab contribution guidelines

{{ project.name_short }} is built and maintained by {{ contractor.name_short }}, and the
{{ contractor.name_short }} Team follows standard code development guidelines.

## Forking

Forking is a method that can be used to modify the code base.

The {{ contractor.name_short }} Team maintains the {{ project.name_short }} code base in a GitLab
repository. The _master_ is the most current version that has been deployed to production. When starting
a new project, the {{ contractor.name_short }} Team makes a copy of the _master_ in GitLab; the copy,
called a _fork_, is where project-specific code changes shall be maintained going forward.

Code changes are implemented using the following workflow:

1. The {{ contractor.name_short }} Team uses the _master_ to create a _fork_ for project-specific code changes.
2. During the project, individual team members create branches, and then work in those branches until the code
    changes are ready to be committed to the fork.
3. When code changes are ready to be integrated from a team member branch into the fork, a team member creates
    a merge request in GitLab. (All code changes are implemented using merge requests.)
4. Another team member reviews the merge request, performs a code review, and approves the merge request so
    that the code changes can be integrated into the fork.

### Branching

Branching is another method that can be used to modify the code base.

Each code repository has at least two branches:

1. **Master branch.** The master is used for development. The CivicActions Team can rebase and create merge
    requests in the master branch.
2. **Production branch.** The production branch is deployed to the production server. When deploying changes
    to production, the release manager copies code from the master branch to the production branch.

The {{ contractor.name_short }} Team might create a branch from the upstream repository when multiple
developers need to collaborate on something that cannot be continuously merged into the master branch. The
rationale for branching within a team is that paired collaboration on a single branch avoids certain types of
friction:

- Having to process merge requests from multiple forks in order to integrate changes to the upstream branch
- Having to add team members to forks as _collaborators_ so that they can contribute in short-lived forks

When team members contribute directly in a branch, {{ contractor.name_short }} can modify work-in-progress
(WIP) merge requests and encourage collaboration across the Cloud Operations team.

### Squashing commits

[Squashing commits](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Squashing-Commits) is allowed
and encouraged within an engineer's branch, but discouraged, except in rare instances in master and production
branches which are fast-forward only and block force pushes.

### Rebase or merge

The team prefers [rebasing over merging](https://www.atlassian.com/git/tutorials/merging-vs-rebasing/). Ongoing
work should always be rebased upon the master branch.

### When should a Merge Request (MR) be created?

Work-in-progress MRs are encouraged. If you create a work-in-progress MR, you might also make it plain in the
MR name with a `[WIP]` prefix. When an MR is ready for review, remove the `[WIP]` label. An MR with a WIP label
is blocked from merging by GitLab.

Merge requests should be created whenever code is ready for review, prior to being merged into the master
branch.

### Should MRs be assigned?

MRs are typically not assigned in GitLab, unless someone specifically needs to sign off on the change.

You can request a review using GitLab's built-in tools, mention someone in the MR with the `@` notation, or
contact them outside the GitLab context to request a review.

### When reviewing an MR, should the change be tested locally?

Whenever possible, the proposed changes should be tested locally. Because of the nature of many of the
{{ project.name_short }} repositories and deployment environments, local testing is not always possible or
practical. Visual code review, however, is always required. In the event that merged code breaks the dev
environment, the decision will be made at the time whether to revert the merge.

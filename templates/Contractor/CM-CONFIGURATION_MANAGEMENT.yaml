family: CONFIGURATION MANAGEMENT
documentation_complete: false
satisfies:
- control_key: CM-1
  control_name: CONFIGURATION MANAGEMENT POLICY AND PROCEDURES
  standard_key: NIST SP 800-53 Revision 4
  covered_by: []
  security_control_type: Hybrid
  narrative:
  - text: >
      {{contractor.name_short}} has developed, documented and disseminated to personnel a configuration
      management policy that addresses purpose, scope, roles, responsibilities, management
      commitment, coordination among organizational entities, and compliance; and
      procedures to facilitate the implementation of the policy and associated controls.
      This information is maintained in the {{contractor.name_short}} Configuration Management
      (CM) Policy. This document can be found in the {{contractor.name_short}} Compliance Docs
      GitHub repository at <{{contractor.compliance_docs_url}}>.

      Configuration changes are overseen by the Change Control Board (CCB) consisting
      of the System Owner, Project Manager, {{contractor.name_short}} Operations staff and the
      engineering team.
    implementation_status: In Place
- control_key: CM-2
  control_name: BASELINE CONFIGURATION
  standard_key: NIST SP 800-53 Revision 4
  covered_by: []
  security_control_type: Hybrid
  narrative:
  - text: A current baseline configuration is always available - stored as a tag in
      the Git repository - such that the site can be regenerated or rolled back should
      unauthorized or failing changes be applied.
    implementation_status: In Place
- control_key: CM-3
  control_name: CONFIGURATION CHANGE CONTROL
  standard_key: NIST SP 800-53 Revision 4
  covered_by: []
  security_control_type: Hybrid
  narrative:
  - text: >
      In accordance with the Configuration Management Plan and control SA-3, {{contractor.name_short}}
      manages changes to the baseline configuration of the application through an
      agile scrum-based process.  Examples of the types of changes that may be introduced
      through a code release include the following, ordered by increasing level of
      possible security risk:

      1. Minor application code changes

      2. New software releases for Drupal core, contributed Drupal modules, or other
      software components that are supplied by outside open-source vendors

      3. Significant software enhancement

      4. Major application modification

      The CCB meets bi-weekly during the sprint planning and backlog grooming meetings.
      In addition, the System Owner or Project Manager may convene the CCB in an emergency
      session to address time-critical topics as deemed necessary.
    implementation_status: In Place
  - key: b
    text: In accordance with the Configuration Management Plan, {{contractor.name_short}} performs
      security impact analysis of all planned code releases. The level of impact is
      assessed by {{contractor.name_short}} Operations staff in collaboration with {{contractor.name_short}}'
      Security Office before the planned code updates are presented at the sprint
      planning meeting for approval. Significant software enhancements and major application
      modifications require approval from the Tech Lead of the Development team. Once
      a code release is considered ready for deployment, a Security Review is done
      before scheduling deployment of the code release to production, in accordance
      with the Agile-based System Development Life Cycle methodology described in
      SA-3.
    implementation_status: In Place
  - key: c
    text: Configuration changes follow the {{contractor.name_short}} sprint planning process. The
      changes themselves are documented within a JIRA ticket tracking system. The
      JIRA ticket has an approval step built into the ticketing workflow that is required
      before the implementation phase. The CCB (agile sprint planning process) is
      responsible for reviewing the change and either approving or rejecting the proposal.
      These workflow changes are captured within an audit log in the ticket and are
      available to anyone viewing the ticket.
    implementation_status: In Place
  - key: d
    text: |
      See part b). Configuration changes are captured within tickets in the {{contractor.name_short}} ticketing system. Each CR follows a specific workflow within the ticketing system that follows our process:
      1. Open (Backlog)
      2. To Do
      3. In Progress
      4. QA
      5. Signoff
      All CRs must be approved before they are applied to the information system.
    implementation_status: In Place
  - key: e
    text: All changes are logged and retained for a minimum of three years in the
      ticketing system. The Change Request (CR) tickets contain a detailed record
      of the steps taken to implement the change, as well as dates of approval and
      implementation.
    implementation_status: In Place
  - key: f
    text: All changes are logged and retained for a minimum of three years in the
      ticketing system. The Change Request (CR) tickets contain a detailed record
      of the steps taken to implement the change, as well as dates of approval and
      implementation.
    implementation_status: In Place
  - key: g
    text: The {{contractor.name_short}} Change Control Board (or agile Sprint Planning team) meets
      bi-weekly, or when operational or security imperatives require, to address requested
      changes to the application.
    implementation_status: In Place
- control_key: CM-3 (2)
  control_name: TEST / VALIDATE / DOCUMENT CHANGES
  standard_key: NIST SP 800-53 Revision 4
  covered_by: []
  security_control_type: Hybrid
  narrative:
  - text: {{contractor.name_short}} tests and validates changes to the system before implementing
      the changes in production. Changes are documented as code and comments in the
      git source code version control system. Any changes made to system are first
      captured in a separate development branch of git that is used to create a pull
      request, which is reviewed for quality and security control before being merged
      into the master branch of the repository.
    implementation_status: In Place
- control_key: CM-4
  control_name: SECURITY IMPACT ANALYSIS
  standard_key: NIST SP 800-53 Revision 4
  covered_by: []
  security_control_type: Hybrid
  narrative:
  - text: Security impact analysis is conducted and documented within the Change Request
      (CR) process described in CM-3(b). All proposed configuration-controlled changes
      to the application are tested first in a sandboxed development environment before
      being pushed to a staging environment to be tested by another developer and
      by the Engineering team prior to final approval from CCB to move changes to
      the production environment.
    implementation_status: In Place
  summary: {{contractor.name_short}} tests and validates changes to the system before implementing
    the changes in production.
- control_key: CM-5
  control_name: ACCESS RESTRICTIONS FOR CHANGE
  standard_key: NIST SP 800-53 Revision 4
  covered_by: []
  security_control_type: Hybrid
  narrative:
  - text: >
      {{contractor.name_short}} restricts system logical access to only those internal personnel
      assigned to work on the application. Logical access is governed by the implementation
      described in AC-3 and the concept of least privilege requirements implemented
      by AC-6.

      All-access to server environments is via an encrypted SSH session with public-key
      authentication, and all server access is logged.
    implementation_status: In Place
- control_key: CM-5 (5)
  control_name: LIMIT PRODUCTION / OPERATIONAL PRIVILEGES
  standard_key: NIST SP 800-53 Revision 4
  covered_by: []
  security_control_type: Hybrid
  narrative:
  - key: b
    text: {{contractor.name_short}}' internal administrator user access rights are reviewed at
      least quarterly by {{contractor.name_short}}' Security Office, which is responsible for approving
      all user account assignments to {{contractor.name_short}} developers.
    implementation_status: In Place
- control_key: CM-6
  control_name: CONFIGURATION SETTINGS
  standard_key: NIST SP 800-53 Revision 4
  covered_by: []
  security_control_type: Hybrid
  narrative:
  - key: b
    text: {{contractor.name_short}} developers follow security best practices according to the
      guidelines set by {{contractor.name_short}}' Security Office.
    implementation_status: Partially in Place
  - key: d
    text: All changes to the configuration settings are logged in the Git source code
      version control system, which records the identity of the developer who committed
      each change. Version control is enforced, with previous tagged code releases
      kept for rollback purposes.
    implementation_status: In Place
- control_key: CM-8 (1)
  control_name: UPDATES DURING INSTALLATIONS / REMOVALS
  standard_key: NIST SP 800-53 Revision 4
  covered_by: []
  security_control_type: Hybrid
  narrative:
  - text: {{contractor.name_short}} stores all software code in a git source version control repository
      which is updated for all component installations, removals, and information
      system updates. This allows {{contractor.name_short}} to build an inventory of the system
      on demand.
    implementation_status: In Place
- control_key: CM-11
  control_name: USER-INSTALLED SOFTWARE
  standard_key: NIST SP 800-53 Revision 4
  covered_by: []
  security_control_type: Hybrid
  narrative:
  - key: a
    text: All software installed in the system environment must be first approved
      via the CCB resulting in a Change Request (CR) being initiated and executed.
      Software installation on the computing nodes within the authorization boundary
      is restricted to administrators. All {{contractor.name_short}} internal administrators are
      informed of this during their initial training and as part of the rules of behavior
      document.
    implementation_status: In Place
  - key: b
    text: {{contractor.name_short}} enforces software installation policies through required acknowledgment
      and sign-off on acceptable use policy by {{contractor.name_short}} personnel. {{contractor.name_short}}
      Development is responsible for enforcing compliance with the acceptable use
      policy.
    implementation_status: In Place
  - key: c
    text: {{contractor.name_short}} monitors policy compliance continuously via the code release
      planning and quality control systems built into the System Development Life
      Cycle described in control SA-3.
    implementation_status: In Place
  summary: |
    All software installed in the system environment must be first approved via the CCB resulting in a Change Request.

#!/usr/bin/env python3

# Scan the YAML files generated by parseCsvControls.py and output
# a CSV file showing the status of the controls by control family.
#
# Usage: controlStatusSpreadsheet.py components > status.csv
#
# @see https://github.com/unitedstates/rtyaml (pip install rtyaml)

import collections
import csv
import glob
import os.path
import rtyaml
import sys

# Ensure an argument was passed.
if len(sys.argv) < 2:
  print("Usage:", sys.argv[0], "components_directory/ > status.csv")
  sys.exit()

# Ensure the passed argument is a directory that exists.
components_dir = sys.argv[1]
if not os.path.isdir(components_dir):
  print("Can't find directory:", components_dir)
  sys.exit()

components_glob = components_dir.rstrip('/') + "/*"

# Hold the status and type of all controls. Map each control number to a dict
# holding information about it gathered across the components and control parts.
controls = collections.defaultdict(
  lambda : {
    'statuses': set(),
    'types': set(),
  }
)

# Read in all of the components' control implementation information.
for component_dir in glob.glob(components_glob):
  for control_family_fn in glob.glob(os.path.join(component_dir, "*.yaml")):
    with open(control_family_fn) as f:
      component_controlfam_data = rtyaml.load(f)

    # Remember the status of each control.
    for control in component_controlfam_data["satisfies"]:
      controls[control["control_key"]]['statuses'].add( control['implementation_status'] )
      controls[control["control_key"]]['types'].add( control['security_control_type'] )

# For each control.
for control in controls:
  # The status overall for a control is sort of the low-water-mark across
  # the statuses of all of the (component X control-part) implementations.
  statuses = controls[control]['statuses']
  if len(statuses) == 1:
    # If there's just one component & part, then the status for the
    # control as a whole is the status for the part.
    status = list(statuses)[0]
  else:
    if "Partially in Place" in statuses:
      status = "Partially in Place"
    elif "In Place" in statuses and ("Not in Place" in statuses or "Planned" in statuses):
      status = "Partially in Place"
    elif statuses == { "In Place", "Inherited" }:
      status = "Hybrid"
    else:
      raise Exception("Not sure how to compute an overall status for statuses {} in {}.".format(repr(statuses), control))
  controls[control]["status"] = status

  # TODO: Validate input. Check that the status is one of the known strings.

  # Ensure the control type is consistent across controls.
  if len(controls[control]["types"]) > 1:
    raise Exception("Control types have different values ({}) in {}.".format(repr(controls[control]["types"]), control))
  controls[control]["type"] = list(controls[control]["types"])[0]

# Output spreadsheet.
w = csv.writer(sys.stdout)
w.writerow([
  "",
  "",
  "Security Control Status",
  "",
  "",
  "",
  "",
  "Security Control Type",
])
w.writerow([
  "Control Family/Class",
  "Number of Controls",
  "In Place",
  "Planned",
  "Partially in Place",
  "Not in Place",
  "Not Applicable",
  "Common",
  "Inherited",
  "Hybrid",
  "System Specific",
])

# Ouput a row for each control family.
control_families = set(ctrl[:2] for ctrl in controls)

# Put control families in order to match existing Google Sheet.
control_family_order = ["RA", "PL", "SA", "CA", "PM", "PS", "PE", "CP", "CM", "MA", "SI", "MP", "IR", "AT", "IA", "AC", "AU", "SC"]
control_family_names = {
  "AC" : "Access Control",
  "AU" : "Audit and Accountability",
  "AT" : "Awareness and Training",
  "CM" : "Configuration Management",
  "CP" : "Contingency Planning",
  "IA" : "Identification and Authentication",
  "IR" : "Incident Response",
  "MA" : "Maintenance",
  "MP" : "Media Protection",
  "PS" : "Personnel Security",
  "PE" : "Physical and Environmental Protection",
  "PL" : "Planning",
  "PM" : "Program Management",
  "RA" : "Risk Assessment",
  "CA" : "Security Assessment and Authorization",
  "SC" : "System and Communications Protection",
  "SI" : "System and Information Integrity",
  "SA" : "System and Services Acquisition",
}
# Add missing families
control_families.update(list(set(control_family_order) - set(control_families)))
control_families = sorted(control_families, key = lambda cf : control_family_order.index(cf))

for control_family in control_families:
  # Get the controls in this family.
  family_controls = set(control for control in controls if control[:2] == control_family)

  # Count by status/type.
  def count_controls(attribute, value):
    count = len([control for control in family_controls
                if controls[control][attribute] == value])
    if count == 0:
      return ""
    return count

  w.writerow([
    "%s (%s)" % (control_family_names[control_family], control_family),
    len(family_controls),
    count_controls("status", "In Place"),
    count_controls("status", "Planned"),
    count_controls("status", "Partially in Place"),
    count_controls("status", "Not in Place"),
    count_controls("status", "Not Applicable"),
    count_controls("type", "Common"),
    count_controls("type", "Inherited (Cloud Service Provider)"),
    count_controls("type", "Hybrid"),
    count_controls("type", "System Specific Control"),
  ])
  
